#!/usr/bin/env python
import os
Import('build')

Env = build.env.Clone()

if build.is_osx():
   Env.Append(FRAMEWORKS=['Cocoa','IOKit'])

if build.is_win32():
	Env.Append(CPPDEFINES='USE_NO_EXPORT=1')
	Env.Append(LIBS=['user32','ole32','shell32','Advapi32'])

if build.is_linux():
	Env.ParseConfig('pkg-config --cflags --libs gtk+-2.0 gdk-2.0')

if build.is_osx() or build.is_linux():
	Env.Append(LIBS=['dl'])

fo = os.path.join(build.dir,'file_utils_boot.o')
zo = os.path.join(build.dir,'unzip_boot.o')

o = Env.Object(target = fo, source = '../api/file_utils.cpp')
if build.is_win32():
	o = Env.Object(target = zo, source = '../api/unzip/unzip.cpp')
	p = Env.Program(build.dir + '/kboot', ['main.cpp',fo,zo])
else:
	p = Env.Program(build.dir + '/kboot', ['main.cpp',fo])
	
if build.is_win32():
	Env.AddPostAction(p, ('mt.exe -nologo -manifest ' + \
	                     '"%s/kboot.exe.manifest" ' + \
	                     ' -outputresource:"%s/kboot.exe"') % \
	                     (build.dir, build.dir))
	
