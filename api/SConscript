#!/usr/bin/env python
import os, inspect, os.path as path
import distutils.dir_util as dirutil

Import('build')

Env = build.env.Clone()
Env.Append(CPPDEFINES={'KROLL_API_EXPORT': 1})
build.add_thirdparty(Env, 'poco')

if build.is_win32():
	Env.Append(LIBS=['shell32', 'user32'])
elif build.is_linux():
	if os.environ.has_key('PKG_CONFIG_PATH'):
		Env.AppendENVPath('PKG_CONFIG_PATH', os.environ['PKG_CONFIG_PATH'])
	Env.ParseConfig('pkg-config --cflags --libs libxml-2.0')
	Env.Append(LIBS=['pthread'])

if build.is_osx():
	Env.Append(LINKFLAGS='-install_name libkroll.dylib')

sources=Glob('*.cpp')
sources.extend(Glob('config/*.cpp'))
sources.extend(Glob('binding/*.cpp'))

if build.is_win32():
	sources.extend(Glob('unzip/*.cpp'))

# copy the includes for building the SDK
cwd = path.dirname(inspect.currentframe().f_code.co_filename)
kroll_include = path.join(build.kroll_include_dir, 'kroll')
if path.exists(kroll_include):
	dirutil.remove_tree(kroll_include)
dirutil.copy_tree(cwd, kroll_include, update=1)
to_remove = Glob(path.join(kroll_include, "*.cpp")) + \
            Glob(path.join(kroll_include, "**", "*.cpp")) + \
            [path.join(kroll_include, 'SConscript')]
for f in to_remove:
	os.remove(str(f))

Env.SharedLibrary(build.dir +'/kroll', source=sources)
