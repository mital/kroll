#!/usr/bin/env python
import os, inspect, os.path as path
import distutils.dir_util as dirutil

Import('build')

Env = build.env.Clone()
Env.Append(CPPDEFINES={'KROLL_API_EXPORT': 1})

if build.is_win32():
	Env.Append(LIBS=['shell32', 'user32'])
else:
	if os.environ.has_key('PKG_CONFIG_PATH'):
		Env.AppendENVPath('PKG_CONFIG_PATH', os.environ['PKG_CONFIG_PATH'])
	Env.ParseConfig('pkg-config --cflags --libs libxml-2.0')

if build.is_linux():
   Env.Append(LIBS=['pthread'])

if build.is_osx():
    OSX_SDK = '/Developer/SDKs/MacOSX10.4u.sdk'
    OSX_UNIV_COMPILER = '-isysroot '+OSX_SDK+' -arch i386'
    OSX_UNIV_LINKER = '-isysroot '+OSX_SDK+' -syslibroot,'+OSX_SDK
    Env.Append(CCFLAGS=OSX_UNIV_COMPILER+' -x objective-c++')
    Env.Append(FRAMEWORKS=['Foundation'])
    Env.Append(LDFLAGS=OSX_UNIV_LINKER)
    Env.Append(CPPPATH=[build.third_party+'/poco/headers'])

sources=Glob('*.cpp')
sources.extend(Glob('config/*.cpp'))
sources.extend(Glob('binding/*.cpp'))

if build.is_win32():
   sources.extend(Glob('unzip/*.cpp'))

# copy the includes for building the SDK
cwd = path.dirname(inspect.currentframe().f_code.co_filename)
kroll_include = path.join(build.kroll_include_dir, 'kroll')
dirutil.remove_tree(kroll_include)
dirutil.copy_tree(cwd, kroll_include, update=1)
to_remove = Glob(path.join(kroll_include, "*.cpp")) + \
            Glob(path.join(kroll_include, "**", "*.cpp")) + \
            [path.join(kroll_include, 'SConscript')]
for f in to_remove:
	os.remove(str(f))

Env.SharedLibrary(build.dir +'/kroll', source=sources)
